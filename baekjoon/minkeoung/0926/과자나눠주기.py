import sys
input = sys.stdin.readline  # 입력 속도 개선

M, N = map(int, input().split())
L = sorted(list(map(int, input().split())))  # 과자 길이 리스트
left, right = 1, L[-1]  # 최소값과 최대값 설정
result = 0

while left <= right:
    cnt = 0
    mid = (left + right) // 2  # 중간값 계산
    cnt = sum(length // mid for length in L)  # 과자 나눌 수 있는 조각 계산
    
    if cnt >= M:  # M명에게 나눠줄 수 있으면
        result = mid  # 현재 mid를 결과로 저장
        left = mid + 1  # 더 큰 조각을 시도
    else:
        right = mid - 1  # 더 작은 조각을 시도

print(result)


##############################################################################

# 초기 상태:
# 학생 수 M = 4
# 과자 길이 리스트 L = [10, 10, 15]
# left = 1, right = 15 (과자의 최소 길이는 1, 최대 길이는 15)
# 이진 탐색 과정:
# 첫 번째 루프:

# mid = (left + right) // 2 = (1 + 15) // 2 = 8
# 각 과자를 길이 8로 나눌 수 있는지 확인:
# 10 // 8 = 1 (첫 번째 과자에서 1개의 조각)
# 10 // 8 = 1 (두 번째 과자에서 1개의 조각)
# 15 // 8 = 1 (세 번째 과자에서 1개의 조각, 나머지는 버림)
# 총 1 + 1 + 1 = 3개의 조각을 만들 수 있습니다.
# cnt = 3 < M = 4 이므로, 더 큰 조각 크기로는 충분하지 않습니다. → right = mid - 1 = 7로 줄여서 더 작은 크기를 탐색합니다.
# 두 번째 루프:

# mid = (left + right) // 2 = (1 + 7) // 2 = 4
# 각 과자를 길이 4로 나눌 수 있는지 확인:
# 10 // 4 = 2 (첫 번째 과자에서 2개의 조각)
# 10 // 4 = 2 (두 번째 과자에서 2개의 조각)
# 15 // 4 = 3 (세 번째 과자에서 3개의 조각)
# 총 2 + 2 + 3 = 7개의 조각을 만들 수 있습니다.
# cnt = 7 >= M = 4 이므로, 길이 4로 충분히 나눌 수 있습니다. 더 큰 조각을 시도해봅니다. → left = mid + 1 = 5
# 세 번째 루프:

# mid = (left + right) // 2 = (5 + 7) // 2 = 6
# 각 과자를 길이 6으로 나눌 수 있는지 확인:
# 10 // 6 = 1 (첫 번째 과자에서 1개의 조각)
# 10 // 6 = 1 (두 번째 과자에서 1개의 조각)
# 15 // 6 = 2 (세 번째 과자에서 2개의 조각)
# 총 1 + 1 + 2 = 4개의 조각을 만들 수 있습니다.
# cnt = 4 >= M = 4 이므로, 길이 6으로도 충분히 나눌 수 있습니다. 더 큰 조각을 시도해봅니다. → left = mid + 1 = 7
# 네 번째 루프:

# mid = (left + right) // 2 = (7 + 7) // 2 = 7
# 각 과자를 길이 7로 나눌 수 있는지 확인:
# 10 // 7 = 1 (첫 번째 과자에서 1개의 조각)
# 10 // 7 = 1 (두 번째 과자에서 1개의 조각)
# 15 // 7 = 2 (세 번째 과자에서 2개의 조각)
# 총 1 + 1 + 2 = 4개의 조각을 만들 수 있습니다.
# cnt = 4 >= M = 4 이므로, 길이 7로도 충분히 나눌 수 있습니다. 더 큰 조각을 시도해봅니다. → left = mid + 1 = 8
# 종료 조건:

# 이제 left = 8, right = 7이므로, **left > right**가 되어 이진 탐색이 종료됩니다.
# 마지막으로 저장된 result = 7이 최대 조각 크기가 됩니다.
# 최종 결과:
# 과자를 나눌 수 있는 최대 조각의 크기는 7입니다.



##############################################
# 이진 탐색이란?
# 이진 탐색이란 데이터가 정렬돼 있는 배열에서 특정한 값을 찾아내는 알고리즘이다. 배열의 중간에 있는 임의의 값을 선택하여 

# 오름차순으로 정렬된 배열이 있다.

# { 17, 28, 43, 67, 88, 92, 100 }

# 이 배열에서 이진 탐색을 이용하여 43의 값을 찾아보자.



# 첫 번째 시도
# 우선 가운데에 위치한 임의의 값 67을 선택한다.

# 선택한 값 67과 찾고자 하는 값 43를 비교한다.

# 43 < 67 이므로 43은 67의 좌측에 존재한다는 것을 알 수 있다.


